h2. Programmer Prerequisites

This guide has resources that are intended to bring you up to speed regarding the workflows and technologies that are used for all Code for Australia projects. After reading it, you should be familiar with:

* Using Git and GitHub
* Understanding Agile workflow

These are only some sample resources to get started. We encourage you to learn and push the envelope in order to bring the best of what you can offer to each project.

endprologue.

h3. Version Control

What is version control, and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. Even though the examples in this book show software source code as the files under version control, in reality any type of file on a computer can be placed under version control.

If you are a graphic or web designer and want to keep every version of an image or layout (which you certainly would), it is very wise to use a Version Control System (VCS). A VCS allows you to: revert files back to a previous state, revert the entire project back to a previous state, review changes made over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also means that if you screw things up or lose files, you can generally recover easily. In addition, you get all this for very little overhead.

h4. Git

Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It’s incredibly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development 

h5. Resouces

A few starting points if you are unfamiliar with Git:

"Official Git Reference Material":http://git-scm.com/book/en/Getting-Started

"Git - The Simple Guide":http://rogerdudler.github.io/git-guide/

h4. Github

GitHub is the best place to share code with friends, co-workers, classmates, and complete strangers. Over four million people use GitHub to build amazing things together.

h5. Resources

"Github Bootcamp Articles":https://help.github.com/categories/54/articles

h3. Agile Development

Agile software development is a group of software development methods based on iterative and incremental development, where requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development and delivery, a time-boxed iterative approach, and encourages rapid and flexible response to change. It is a conceptual framework that promotes foreseen tight interactions throughout the development cycle.

h4. Agile Manifesto

We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:

* *Individuals and interactions* over Processes and tools
* *Working software* over Comprehensive documentation
* *Customer collaboration* over Contract negotiation
* *Responding to change* over Following a plan

That is, while there is value in the items on the right, we value the items on the left more.

Kent Beck	James Grenning	Robert C. Martin
Mike Beedle	Jim Highsmith	Steve Mellor
Arie van Bennekum	Andrew Hunt	Ken Schwaber
Alistair Cockburn	Ron Jeffries	Jeff Sutherland
Ward Cunningham	Jon Kern	Dave Thomas
Martin Fowler	Brian Marick
	
© 2001, the above authors. This declaration may be freely copied in any form, but only in its entirety through this notice.

h5. Resources

"Agile Alliance Guides":http://guide.agilealliance.org/

"Agile Project Management Overview":http://www.tutorialspoint.com/management_concepts/agile_project_management.htm
